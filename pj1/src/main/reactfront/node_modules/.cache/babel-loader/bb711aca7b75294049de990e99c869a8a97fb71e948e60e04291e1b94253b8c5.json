{"ast":null,"code":"import { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n  constructor(_client, _webSocket) {\n    let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this._client = _client;\n    this._webSocket = _webSocket;\n    this._serverFrameHandlers = {\n      // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n      CONNECTED: frame => {\n        this.debug(`connected to server ${frame.headers.server}`);\n        this._connected = true;\n        this._connectedVersion = frame.headers.version;\n        // STOMP version 1.2 needs header values to be escaped\n        if (this._connectedVersion === Versions.V1_2) {\n          this._escapeHeaderValues = true;\n        }\n        this._setupHeartbeat(frame.headers);\n        this.onConnect(frame);\n      },\n      // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n      MESSAGE: frame => {\n        // the callback is registered when the client calls\n        // `subscribe()`.\n        // If there is no registered subscription for the received message,\n        // the default `onUnhandledMessage` callback is used that the client can set.\n        // This is useful for subscriptions that are automatically created\n        // on the browser side (e.g. [RabbitMQ's temporary\n        // queues](http://www.rabbitmq.com/stomp.html)).\n        const subscription = frame.headers.subscription;\n        const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n        // bless the frame to be a Message\n        const message = frame;\n        const client = this;\n        const messageId = this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n        // add `ack()` and `nack()` methods directly to the returned frame\n        // so that a simple call to `message.ack()` can acknowledge the message.\n        message.ack = function () {\n          let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.ack(messageId, subscription, headers);\n        };\n        message.nack = function () {\n          let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.nack(messageId, subscription, headers);\n        };\n        onReceive(message);\n      },\n      // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n      RECEIPT: frame => {\n        const callback = this._receiptWatchers[frame.headers['receipt-id']];\n        if (callback) {\n          callback(frame);\n          // Server will acknowledge only once, remove the callback\n          delete this._receiptWatchers[frame.headers['receipt-id']];\n        } else {\n          this.onUnhandledReceipt(frame);\n        }\n      },\n      // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n      ERROR: frame => {\n        this.onStompError(frame);\n      }\n    };\n    // used to index subscribers\n    this._counter = 0;\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n    this._partialData = '';\n    this._escapeHeaderValues = false;\n    this._lastServerActivityTS = Date.now();\n    this.configure(config);\n  }\n  get connectedVersion() {\n    return this._connectedVersion;\n  }\n  get connected() {\n    return this._connected;\n  }\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n  }\n  start() {\n    const parser = new Parser(\n    // On Frame\n    rawFrame => {\n      const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n      // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n      if (!this.logRawCommunication) {\n        this.debug(`<<< ${frame}`);\n      }\n      const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n      serverFrameHandler(frame);\n    },\n    // On Incoming Ping\n    () => {\n      this.debug('<<< PONG');\n    });\n    this._webSocket.onmessage = evt => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n      if (this.logRawCommunication) {\n        const rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n      parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n    };\n    this._onclose = closeEvent => {\n      this.debug(`Connection closed to ${this._client.brokerURL}`);\n      this._cleanUp();\n      this.onWebSocketClose(closeEvent);\n    };\n    this._webSocket.onclose = this._onclose;\n    this._webSocket.onerror = errorEvent => {\n      this.onWebSocketError(errorEvent);\n    };\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = Object.assign({}, this.connectHeaders);\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({\n        command: 'CONNECT',\n        headers: connectHeaders\n      });\n    };\n  }\n  _setupHeartbeat(headers) {\n    if (headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2) {\n      return;\n    }\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = headers['heart-beat'].split(',').map(v => parseInt(v, 10));\n    if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n      const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        if (this._webSocket.readyState === StompSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      }, ttl);\n    }\n    if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n      const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > ttl * 2) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeOrDiscardWebsocket();\n        }\n      }, ttl);\n    }\n  }\n  _closeOrDiscardWebsocket() {\n    if (this.discardWebsocketOnCommFailure) {\n      this.debug('Discarding websocket, the underlying socket may linger for a while');\n      this._discardWebsocket();\n    } else {\n      this.debug('Issuing close on the websocket');\n      this._closeWebsocket();\n    }\n  }\n  forceDisconnect() {\n    if (this._webSocket) {\n      if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n        this._closeOrDiscardWebsocket();\n      }\n    }\n  }\n  _closeWebsocket() {\n    this._webSocket.onmessage = () => {}; // ignore messages\n    this._webSocket.close();\n  }\n  _discardWebsocket() {\n    if (!this._webSocket.terminate) {\n      augmentWebsocket(this._webSocket, msg => this.debug(msg));\n    }\n    this._webSocket.terminate();\n  }\n  _transmit(params) {\n    const {\n      command,\n      headers,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    } = params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader\n    });\n    let rawChunk = frame.serialize();\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n  dispose() {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, frame => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({\n          command: 'DISCONNECT',\n          headers: disconnectHeaders\n        });\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n        this._closeWebsocket();\n      }\n    }\n  }\n  _cleanUp() {\n    this._connected = false;\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n  publish(params) {\n    const {\n      destination,\n      headers,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    } = params;\n    const hdrs = Object.assign({\n      destination\n    }, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    });\n  }\n  watchForReceipt(receiptId, callback) {\n    this._receiptWatchers[receiptId] = callback;\n  }\n  subscribe(destination, callback) {\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    headers = Object.assign({}, headers);\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({\n      command: 'SUBSCRIBE',\n      headers\n    });\n    const client = this;\n    return {\n      id: headers.id,\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n  unsubscribe(id) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    headers = Object.assign({}, headers);\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({\n      command: 'UNSUBSCRIBE',\n      headers\n    });\n  }\n  begin(transactionId) {\n    const txId = transactionId || `tx-${this._counter++}`;\n    this._transmit({\n      command: 'BEGIN',\n      headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit() {\n        client.commit(txId);\n      },\n      abort() {\n        client.abort(txId);\n      }\n    };\n  }\n  commit(transactionId) {\n    this._transmit({\n      command: 'COMMIT',\n      headers: {\n        transaction: transactionId\n      }\n    });\n  }\n  abort(transactionId) {\n    this._transmit({\n      command: 'ABORT',\n      headers: {\n        transaction: transactionId\n      }\n    });\n  }\n  ack(messageId, subscriptionId) {\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    headers = Object.assign({}, headers);\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({\n      command: 'ACK',\n      headers\n    });\n  }\n  nack(messageId, subscriptionId) {\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    headers = Object.assign({}, headers);\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({\n      command: 'NACK',\n      headers\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["BYTE","FrameImpl","Parser","StompSocketState","Versions","augmentWebsocket","StompHandler","constructor","_client","_webSocket","config","CONNECTED","frame","debug","headers","server","_connected","_connectedVersion","version","V1_2","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","Date","now","configure","connectedVersion","connected","conf","Object","assign","start","parser","rawFrame","fromRawFrame","logRawCommunication","serverFrameHandler","_serverFrameHandlers","command","onUnhandledFrame","onmessage","evt","rawChunkAsString","data","ArrayBuffer","TextDecoder","decode","parseChunk","appendMissingNULLonIncoming","_onclose","closeEvent","brokerURL","_cleanUp","onWebSocketClose","onclose","onerror","errorEvent","onWebSocketError","onopen","connectHeaders","stompVersions","supportedVersions","heartbeatOutgoing","heartbeatIncoming","join","_transmit","V1_1","serverOutgoing","serverIncoming","split","map","v","parseInt","ttl","Math","max","_pinger","setInterval","readyState","OPEN","send","LF","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocketOnCommFailure","_discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","terminate","msg","params","body","binaryBody","skipContentLengthHeader","escapeHeaderValues","rawChunk","serialize","forceBinaryWSFrames","TextEncoder","encode","splitLargeFrames","out","length","chunk","substring","maxWebSocketChunkSize","dispose","disconnectHeaders","receipt","watchForReceipt","onDisconnect","error","clearInterval","publish","destination","hdrs","receiptId","subscribe","id","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId"],"sources":["C:\\Users\\GGG\\Desktop\\new\\jinjin\\pj1\\src\\main\\reactfront\\node_modules\\@stomp\\stompjs\\src\\stomp-handler.ts"],"sourcesContent":["import { BYTE } from './byte';\nimport { Client } from './client';\nimport { FrameImpl } from './frame-impl';\nimport { IMessage } from './i-message';\nimport { ITransaction } from './i-transaction';\nimport { Parser } from './parser';\nimport { StompConfig } from './stomp-config';\nimport { StompHeaders } from './stomp-headers';\nimport { StompSubscription } from './stomp-subscription';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  IStompSocket,\n  IStompSocketMessageEvent,\n  messageCallbackType,\n  StompSocketState,\n  wsErrorCallbackType,\n} from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public stompVersions: Versions;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  public onWebSocketError: wsErrorCallbackType;\n\n  public logRawCommunication: boolean;\n\n  public splitLargeFrames: boolean;\n\n  public maxWebSocketChunkSize: number;\n\n  public forceBinaryWSFrames: boolean;\n\n  public appendMissingNULLonIncoming: boolean;\n\n  public discardWebsocketOnCommFailure: boolean;\n\n  get connectedVersion(): string {\n    return this._connectedVersion;\n  }\n  private _connectedVersion: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  private _onclose: (closeEvent: any) => void;\n\n  constructor(\n    private _client: Client,\n    public _webSocket: IStompSocket,\n    config: StompConfig = {}\n  ) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (Object as any).assign(this, conf);\n  }\n\n  public start(): void {\n    const parser = new Parser(\n      // On Frame\n      rawFrame => {\n        const frame = FrameImpl.fromRawFrame(\n          rawFrame,\n          this._escapeHeaderValues\n        );\n\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!this.logRawCommunication) {\n          this.debug(`<<< ${frame}`);\n        }\n\n        const serverFrameHandler =\n          this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug('<<< PONG');\n      }\n    );\n\n    this._webSocket.onmessage = (evt: IStompSocketMessageEvent) => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n\n      if (this.logRawCommunication) {\n        const rawChunkAsString =\n          evt.data instanceof ArrayBuffer\n            ? new TextDecoder().decode(evt.data)\n            : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n\n      parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n    };\n\n    this._onclose = (closeEvent): void => {\n      this.debug(`Connection closed to ${this._client.brokerURL}`);\n      this._cleanUp();\n      this.onWebSocketClose(closeEvent);\n    };\n\n    this._webSocket.onclose = this._onclose;\n\n    this._webSocket.onerror = (errorEvent): void => {\n      this.onWebSocketError(errorEvent);\n    };\n\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = (Object as any).assign({}, this.connectHeaders);\n\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [\n        this.heartbeatOutgoing,\n        this.heartbeatIncoming,\n      ].join(',');\n      this._transmit({ command: 'CONNECT', headers: connectHeaders });\n    };\n  }\n\n  private readonly _serverFrameHandlers: {\n    [key: string]: frameCallbackType;\n  } = {\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    CONNECTED: frame => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._connectedVersion = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._connectedVersion === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    MESSAGE: frame => {\n      // the callback is registered when the client calls\n      // `subscribe()`.\n      // If there is no registered subscription for the received message,\n      // the default `onUnhandledMessage` callback is used that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive =\n        this._subscriptions[subscription] || this.onUnhandledMessage;\n\n      // bless the frame to be a Message\n      const message = frame as IMessage;\n\n      const client = this;\n      const messageId =\n        this._connectedVersion === Versions.V1_2\n          ? message.headers.ack\n          : message.headers['message-id'];\n\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    RECEIPT: frame => {\n      const callback = this._receiptWatchers[frame.headers['receipt-id']];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers['receipt-id']];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    ERROR: frame => {\n      this.onStompError(frame);\n    },\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if (\n      headers.version !== Versions.V1_1 &&\n      headers.version !== Versions.V1_2\n    ) {\n      return;\n    }\n\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = headers['heart-beat']\n      .split(',')\n      .map((v: string) => parseInt(v, 10));\n\n    if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n      const ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        if (this._webSocket.readyState === StompSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      }, ttl);\n    }\n\n    if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n      const ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > ttl * 2) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeOrDiscardWebsocket();\n        }\n      }, ttl);\n    }\n  }\n\n  private _closeOrDiscardWebsocket() {\n    if (this.discardWebsocketOnCommFailure) {\n      this.debug(\n        'Discarding websocket, the underlying socket may linger for a while'\n      );\n      this._discardWebsocket();\n    } else {\n      this.debug('Issuing close on the websocket');\n      this._closeWebsocket();\n    }\n  }\n\n  public forceDisconnect() {\n    if (this._webSocket) {\n      if (\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\n        this._webSocket.readyState === StompSocketState.OPEN\n      ) {\n        this._closeOrDiscardWebsocket();\n      }\n    }\n  }\n\n  public _closeWebsocket() {\n    this._webSocket.onmessage = () => {}; // ignore messages\n    this._webSocket.close();\n  }\n\n  private _discardWebsocket() {\n    if (!this._webSocket.terminate) {\n      augmentWebsocket(this._webSocket, (msg: string) => this.debug(msg));\n    }\n\n    this._webSocket.terminate();\n  }\n\n  private _transmit(params: {\n    command: string;\n    headers?: StompHeaders;\n    body?: string;\n    binaryBody?: Uint8Array;\n    skipContentLengthHeader?: boolean;\n  }): void {\n    const { command, headers, body, binaryBody, skipContentLengthHeader } =\n      params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader,\n    });\n\n    let rawChunk = frame.serialize();\n\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk as string;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = (Object as any).assign(\n          {},\n          this.disconnectHeaders\n        );\n\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, frame => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\n        this._webSocket.readyState === StompSocketState.OPEN\n      ) {\n        this._closeWebsocket();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: IPublishParams): void {\n    const { destination, headers, body, binaryBody, skipContentLengthHeader } =\n      params;\n    const hdrs: StompHeaders = (Object as any).assign({ destination }, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader,\n    });\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(\n    destination: string,\n    callback: messageCallbackType,\n    headers: StompHeaders = {}\n  ): StompSubscription {\n    headers = (Object as any).assign({}, headers);\n\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({ command: 'SUBSCRIBE', headers });\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      },\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({ command: 'UNSUBSCRIBE', headers });\n  }\n\n  public begin(transactionId: string): ITransaction {\n    const txId = transactionId || `tx-${this._counter++}`;\n    this._transmit({\n      command: 'BEGIN',\n      headers: {\n        transaction: txId,\n      },\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      },\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: 'COMMIT',\n      headers: {\n        transaction: transactionId,\n      },\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: 'ABORT',\n      headers: {\n        transaction: transactionId,\n      },\n    });\n  }\n\n  public ack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({ command: 'ACK', headers });\n  }\n\n  public nack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({ command: 'NACK', headers });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}