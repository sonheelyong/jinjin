{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GGG\\\\Desktop\\\\new\\\\jinjin\\\\pj1\\\\src\\\\main\\\\reactfront\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as StompJs from '@stomp/stompjs';\nimport instance from '../../utils/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateReadChat() {\n  _s();\n  const [chatList, setChatList] = useState([]);\n  const [chat, setChat] = useState('');\n  const {\n    apply_id\n  } = useParams();\n  const client = useRef({});\n  const connect = () => {\n    client.current = new StompJs.Client({\n      brokerURL: 'ws://localhost:8787/ws',\n      onConnect: () => {\n        console.log('success');\n        subscribe();\n      }\n    });\n    client.current.activate();\n  };\n  const publish = chat => {\n    if (!client.current.connected) return;\n    client.current.publish({\n      destination: '/pub/chat',\n      body: JSON.stringify({\n        applyId: apply_id,\n        chat: chat\n      })\n    });\n    setChat('');\n  };\n  const subscribe = () => {\n    client.current.subscribe('/sub/chat/' + apply_id, body => {\n      const json_body = JSON.parse(body.body);\n      setChatList(_chat_list => [..._chat_list, json_body]);\n    });\n  };\n  const disconnect = () => {\n    client.current.deactivate();\n  };\n  const handleChange = event => {\n    // 채팅 입력 시 state에 값 설정\n    setChat(event.target.value);\n  };\n  const handleSubmit = (event, chat) => {\n    // 보내기 버튼 눌렀을 때 publish\n    event.preventDefault();\n    publish(chat);\n  };\n  useEffect(() => {\n    connect();\n    return () => disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'chat-list',\n      children: chatList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => handleSubmit(event, chat),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: 'text',\n          name: 'chatInput',\n          onChange: handleChange,\n          value: chat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: 'submit',\n        value: '의견 보내기'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateReadChat, \"QpqhXLRCnWGp9muFlTKeuTKbEKo=\", false, function () {\n  return [useParams];\n});\n_c = CreateReadChat;\nvar _c;\n$RefreshReg$(_c, \"CreateReadChat\");","map":{"version":3,"names":["useRef","useState","useEffect","useParams","StompJs","instance","CreateReadChat","chatList","setChatList","chat","setChat","apply_id","client","connect","current","Client","brokerURL","onConnect","console","log","subscribe","activate","publish","connected","destination","body","JSON","stringify","applyId","json_body","parse","_chat_list","disconnect","deactivate","handleChange","event","target","value","handleSubmit","preventDefault"],"sources":["C:/Users/GGG/Desktop/new/jinjin/pj1/src/main/reactfront/src/App.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport * as StompJs from '@stomp/stompjs';\r\nimport instance from '../../utils/axiosConfig';\r\n\r\nfunction CreateReadChat() {\r\n  const [chatList, setChatList] = useState([]);\r\n  const [chat, setChat] = useState('');\r\n\r\n  const { apply_id } = useParams();\r\n  const client = useRef({});\r\n\r\n  const connect = () => {\r\n    client.current = new StompJs.Client({\r\n      brokerURL: 'ws://localhost:8787/ws',\r\n      onConnect: () => {\r\n        console.log('success');\r\n        subscribe();\r\n      },\r\n    });\r\n    client.current.activate();\r\n  };\r\n\r\n  const publish = (chat) => {\r\n    if (!client.current.connected) return;\r\n\r\n    client.current.publish({\r\n      destination: '/pub/chat',\r\n      body: JSON.stringify({\r\n        applyId: apply_id,\r\n        chat: chat,\r\n      }),\r\n    });\r\n\r\n    setChat('');\r\n  };\r\n\r\n  const subscribe = () => {\r\n    client.current.subscribe('/sub/chat/' + apply_id, (body) => {\r\n      const json_body = JSON.parse(body.body);\r\n      setChatList((_chat_list) => [\r\n        ..._chat_list, json_body\r\n      ]);\r\n    });\r\n  };\r\n\r\n  const disconnect = () => {\r\n    client.current.deactivate();\r\n  };\r\n\r\n  const handleChange = (event) => { // 채팅 입력 시 state에 값 설정\r\n    setChat(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event, chat) => { // 보내기 버튼 눌렀을 때 publish\r\n    event.preventDefault();\r\n\r\n    publish(chat);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => disconnect();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={'chat-list'}>{chatList}</div>\r\n      <form onSubmit={(event) => handleSubmit(event, chat)}>\r\n        <div>\r\n          <input type={'text'} name={'chatInput'} onChange={handleChange} value={chat} />\r\n        </div>\r\n        <input type={'submit'} value={'의견 보내기'} />\r\n      </form>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}