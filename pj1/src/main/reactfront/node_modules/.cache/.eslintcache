[{"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/index.js":"1","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Home.js":"2","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/About.js":"3","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/UserList.js":"4","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Profile.js":"5","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/reportWebVitals.js":"6","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/SignUp.js":"7","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/AfterProfile.js":"8","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/GoogleLoginButton.js":"9","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/board/Board.js":"10","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Layout.js":"11","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Header.js":"12","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/ChatRoom.js":"13","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/App.jsx":"14","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/Login.js":"15"},{"size":514,"mtime":1671081648207,"results":"16","hashOfConfig":"17"},{"size":377,"mtime":1671081894565,"results":"18","hashOfConfig":"17"},{"size":119,"mtime":1671081011832,"results":"19","hashOfConfig":"17"},{"size":0,"mtime":1671081648207,"results":"20","hashOfConfig":"17"},{"size":123,"mtime":1671081011833,"results":"21","hashOfConfig":"17"},{"size":362,"mtime":1671081011833,"results":"22","hashOfConfig":"17"},{"size":562,"mtime":1671000066132,"results":"23","hashOfConfig":"17"},{"size":353,"mtime":1671008107807,"results":"24","hashOfConfig":"17"},{"size":1920,"mtime":1671096090310,"results":"25","hashOfConfig":"17"},{"size":136,"mtime":1671033005931,"results":"26","hashOfConfig":"17"},{"size":193,"mtime":1670998750723,"results":"27","hashOfConfig":"17"},{"size":621,"mtime":1671004236267,"results":"28","hashOfConfig":"17"},{"size":6967,"mtime":1670913636091,"results":"29","hashOfConfig":"17"},{"size":1196,"mtime":1671084830071,"results":"30","hashOfConfig":"17"},{"size":813,"mtime":1671038336477,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"ps5n41",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"35"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"35"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/index.js",[],[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Home.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/About.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/UserList.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Profile.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/reportWebVitals.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/SignUp.js",["81","82","83","84"],[],"import React, { useState } from 'react'\nimport Layout from '../Layout';\n\n\n  \nfunction SignUp(name) {\n  \n  const[id,Setid] = useState(\"\");\n  const[passwd,Setpasswd] = useState(\"\");\n  \n  return (\n    <>\n    <Layout />\n    <div>\n    <form method='post' action='/SignUp'>\n        <div>\n           아이디 <input name='id'></input>\n        </div>\n        <div>\n           비밀번호 <input name='passwd'></input>\n        </div>\n        <button type='submit'>회원가입</button>\n       \n    </form>\n    \n    </div>\n    </>\n   \n  );\n \n  \n}\n\nexport default SignUp\n","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/AfterProfile.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/GoogleLoginButton.js",["85","86","87","88","89"],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/board/Board.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Layout.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/Header.js",[],[],"/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/ChatRoom.js",["90"],[],"import React, { useEffect, useState } from 'react'\nimport {over} from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient =null;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());     \n    const [publicChats, setPublicChats] = useState([]); \n    const [tab,setTab] =useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n      });\n    useEffect(() => {\n      console.log(userData);\n    }, [userData]);\n\n    const connect =()=>{\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({},onConnected, onError);\n    }\n\n    const onConnected = () => {\n        setUserData({...userData,\"connected\": true});\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/'+userData.username+'/private', onPrivateMessage);\n        userJoin();\n    }\n\n    const userJoin=()=>{\n          var chatMessage = {\n            senderName: userData.username,\n            status:\"JOIN\"\n          };\n          stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n\n    const onMessageReceived = (payload)=>{\n        var payloadData = JSON.parse(payload.body);\n        console.log(\"1111\"+payloadData)\n        switch(payloadData.status){\n            case \"JOIN\":\n                if(!privateChats.get(payloadData.senderName)){\n                    privateChats.set(payloadData.senderName,[]);\n                    setPrivateChats(new Map(privateChats));\n                    console.log(\"개인\"+privateChats)\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                console.log(\"공용\"+publicChats)\n                break;\n        }\n    }\n    \n    const onPrivateMessage = (payload)=>{\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        console.log(payloadData)\n        if(privateChats.get(payloadData.senderName)){\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        }else{\n            let list =[];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName,list);\n            setPrivateChats(new Map(privateChats));\n        }\n    }\n\n    const onError = (err) => {\n        console.log(err);\n        \n    }\n\n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n            if (stompClient) {\n              var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n              };\n              console.log(chatMessage);\n              stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n              setUserData({...userData,\"message\": \"\"});\n            }\n    }\n\n    const sendPrivateValue=()=>{\n        if (stompClient) {\n          var chatMessage = {\n            senderName: userData.username,\n            receiverName:tab,\n            message: userData.message,\n            status:\"MESSAGE\"\n          };\n          \n          if(userData.username !== tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n          }\n          stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n          setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const handleUsername=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\": value});\n    }\n\n    const registerUser=()=>{\n        connect();\n    }\n    return (\n    <div className=\"container\">\n        {userData.connected?\n        <div className=\"chat-box\">\n            <div className=\"member-list\">\n                <ul>\n                    <li onClick={()=>{setTab(\"CHATROOM\")}} className={`member ${tab===\"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                    {[...privateChats.keys()].map((name,index)=>(\n                        <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"}`} key={index}>{name}</li>\n                    ))}\n                </ul>\n            </div>\n            {tab===\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {publicChats.map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                </div>\n            </div>}\n            {tab!==\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {[...privateChats.get(tab)].map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\n                </div>\n            </div>}\n        </div>\n        :\n        <div className=\"register\">\n            <input\n                id=\"user-name\"\n                placeholder=\"Enter your name\"\n                name=\"userName\"\n                value={userData.username}\n                onChange={handleUsername}\n                margin=\"normal\"\n              />\n              <button type=\"button\" onClick={registerUser}>\n                    connect\n              </button> \n        </div>}\n    </div>\n    )\n}\n\nexport default ChatRoom","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/App.jsx",["91","92","93","94","95"],[],"import React, {useEffect, useState} from 'react'\nimport ChatRoom from './components/ChatRoom'\nimport { BrowserRouter, Routes, Route, Link, Navigate } from 'react-router-dom';\nimport About from './components/About';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\nimport SignUp from './components/login/SignUp';\nimport UserList from './components/UserList';\nimport GoogleLoginButton from './components/login/GoogleLoginButton'\nimport AfterProfile  from './components/login/AfterProfile';\nimport Board from './components/board/Board';\n\nconst App = () => {\n\n\n  return (\n    <>\n  \n    <BrowserRouter>\n      <Routes>\n      \n      <Route path='/' element={<Home/>} />\n      <Route path='/about' element={<About/>} />\n      <Route path='/profile' element={<Profile/>} />\n      <Route path='/signup' element={<SignUp/>} />\n      <Route path='/userList' element={<UserList/>} />\n      <Route path='/googleLoginButton' element={<GoogleLoginButton/>} />\n      \n      <Route path='/afterProfile' element={<AfterProfile/>} />\n      <Route path='/board' element={<Board/>}/>\n      \n\n      \n    </Routes>\n   </BrowserRouter>\n    \n    </>\n    \n\n  );\n}\n//1111\nexport default App;","/Users/lsj/Desktop/aa/jinjin/pj1/src/main/reactfront/src/components/login/Login.js",["96"],[],{"ruleId":"97","severity":1,"message":"98","line":8,"column":9,"nodeType":"99","messageId":"100","endLine":8,"endColumn":11},{"ruleId":"97","severity":1,"message":"101","line":8,"column":12,"nodeType":"99","messageId":"100","endLine":8,"endColumn":17},{"ruleId":"97","severity":1,"message":"102","line":9,"column":9,"nodeType":"99","messageId":"100","endLine":9,"endColumn":15},{"ruleId":"97","severity":1,"message":"103","line":9,"column":16,"nodeType":"99","messageId":"100","endLine":9,"endColumn":25},{"ruleId":"104","severity":2,"message":"105","line":25,"column":9,"nodeType":"99","messageId":"106","endLine":25,"endColumn":15},{"ruleId":"104","severity":2,"message":"105","line":31,"column":9,"nodeType":"99","messageId":"106","endLine":31,"endColumn":15},{"ruleId":"104","severity":2,"message":"105","line":36,"column":9,"nodeType":"99","messageId":"106","endLine":36,"endColumn":15},{"ruleId":"107","severity":1,"message":"108","line":62,"column":36,"nodeType":"109","messageId":"110","endLine":62,"endColumn":38},{"ruleId":"111","severity":1,"message":"112","line":69,"column":17,"nodeType":"113","endLine":69,"endColumn":41},{"ruleId":"114","severity":1,"message":"115","line":44,"column":9,"nodeType":"116","messageId":"117","endLine":57,"endColumn":10},{"ruleId":"97","severity":1,"message":"118","line":1,"column":16,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"119","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":35},{"ruleId":"97","severity":1,"message":"120","line":2,"column":8,"nodeType":"99","messageId":"100","endLine":2,"endColumn":16},{"ruleId":"97","severity":1,"message":"121","line":3,"column":40,"nodeType":"99","messageId":"100","endLine":3,"endColumn":44},{"ruleId":"97","severity":1,"message":"122","line":3,"column":46,"nodeType":"99","messageId":"100","endLine":3,"endColumn":54},{"ruleId":"123","severity":1,"message":"124","line":24,"column":8,"nodeType":"125","endLine":24,"endColumn":17,"suggestions":"126"},"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'Setid' is assigned a value but never used.","'passwd' is assigned a value but never used.","'Setpasswd' is assigned a value but never used.","no-undef","'google' is not defined.","undef","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useEffect' is defined but never used.","'useState' is defined but never used.","'ChatRoom' is defined but never used.","'Link' is defined but never used.","'Navigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["127"],{"desc":"128","fix":"129"},"Update the dependencies array to be: [isLogin, navigate]",{"range":"130","text":"131"},[598,607],"[isLogin, navigate]"]